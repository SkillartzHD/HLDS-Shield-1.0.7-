#include <amxmodx>
#include <fakemeta>
#include <amxmisc>
#include <orpheu_advanced>
#include <orpheu>
#include <okapi>
#include <engine>
#include <nvault>
#include <regex>

new g_MaxClients,Regex:g_iPattern
new OrpheuHook:executestringhook
new okapi_hook:sendbanhook
new okapi_hook:statushook
new okapi_hook:spawnhook
new okapi_hook:sendreshook
new okapi_hook:sayhook
new okapi_hook:netgethook
new okapi_hook:connecthook
new okapi_hook:userfhook
new okapi_hook:printfhook
new okapi_hook:queryhook
new OrpheuHook:queryhook2
new okapi_hook:runcmd
new okapi_hook:rejecthook
new okapi_hook:mungehook
new okapi_hook:infovaluehook
new okapi_hook:dropclienthook
new okapi_hook:safefilehook
new okapi_hook:netchanhook
new okapi_hook:processhook
new okapi_hook:openfilehook
new okapi_hook:writefilehook
new okapi_hook:newhook
new okapi_hook:addiphook
new okapi_hook:rconhook
new okapi_hook:resourceslisthook
new okapi_hook:voicehook
new okapi_hook:stringcmdhook
new okapi_hook:parsehook
new okapi_hook:killhook
new okapi_hook:duplicatehook
new OrpheuFunction:long2
new limitba[33]
new debug_s[33]
new UserCheckImpulse[33]
new DuplicateSteamid
new RandomSteamid
new IlegalCmd
new SpectatorVguiBug
new Radio
new NameUnLock[33]
new NameBugShowMenu
new CommandBug
new UpdateClient
new NameBug
new NameSpammer
new localas[33],valutsteamid,authid[32],authid2[32],szip[32],szip2[33],bullshit[200]
#define fakeplayer "CSTRIKE_FAKEPLAYERS"
#define suspicious "CSTRIKE_SUSPICIOUS"
#define ilegalcommand "CSTRIKE_ILEGALCMD"
#define cmdbug "CSTRIKE_pfnClientCommand"
#define namebug "CSTRIKE_SetValueForStarKey"
#define netbug "CSTRIKE_NETLONG"
#define autobuybug "CSTRIKE_SETAUTOBUY"
#define processfilex "CSTRIKE_PROCESSFILE"
#define netch "CSTRIKE_NETCHANNEL"
#define steamidhack "CSTRIKE_STEAMIDHACK"
#define bugclc "CSTRIKE_CLC_COMMAND"
#define overload3 "CSTRIKE_RUNCMD"
#define killbug "CSTRIKE_KILLBUG"
#define overload2 "CSTRIKE_RESOUCESLIST"
#define hldsrcon "CSTRIKE_RCON"
#define loopnamebug "CSTRIKE_LOOPNAME"
#define fullupdatespam "CSTRIKE_FULLUPDATE"
#define voicedatabug "CSTRIKE_VOICEDATA"
#define radiofunction "CSTRIKE_RADIO"
#define newbug "CSTRIKE_CONNECTIONSPAM"
#define hldsoverflowed "CSTRIKE_OVERFLOWED"
#define a2ack "CSTRIKE_ACK"
#define ilegalban "CSTRIKE_BANBUG"
#define hlproxy "CSTRIKE_HLPROXY"
#define cmdrun "CSTRIKE_RUNCMD"
#define query "CSTRIKE_QUERYSPAM"
#define spambot "CSTRIKE_SPAMBOT"
#define hltvbug "CSTRIKE_HLTV"
#define adminbug "CSTRIKE_ADMINBUG"
#define safefile "CSTRIKE_SAFEFILEDOWNLOAD"
#define exploit "CSTRIKE_EXPLOIT"
#define hldsbug "CSTRIKE_HLDSBUG"
#define hldspawn "CSTRIKE_SPAWN"
#define hldsres "CSTRIKE_SENDRES"
#define hldsprintf "CSTRIKE_CONPRINTF"

#define loc "addons/amxmodx/configs/settings/HLDS_SafeFileToDownload.ini"
#define loc2 "addons/amxmodx/configs/settings/HLDS_MemoryHack.cfg"
#define settings "addons/amxmodx/configs/settings/HLDS-Shield.log"
#define locatie "addons/amxmodx/configs/settings/HLDS_FilesCheck.ini"
#define ip_flitred "addons/amxmodx/configs/settings/HLDS_BlackListIP.ini"

#define Host_Status_f_linux "Host_Status_f"
#define SV_SendBan_linux "SV_FilterPacket"
#define SV_Spawn_f_linux "SV_Spawn_f"
#define Host_Say_f_linux "Host_Say_f"
#define SVC_PingSignature_linux "net_from"
#define SV_ParseStringCommand_linux "SV_ParseStringCommand"
#define SV_SendRes_f_linux "SV_SendRes_f"
#define SV_ConnectClient_f_linux "SV_ConnectClient"
#define SV_DropClient_linux "SV_DropClient"
#define SV_ParseConsistencyResponse_linux "SV_ParseConsistencyResponse"
#define Host_kill_f_linux "Host_Kill_f"
#define NET_GetLong_linux "NET_GetLong"
#define SV_voicedatalinux "SV_ParseVoiceData"
#define SV_Reslinux "SV_ParseResourceList"
#define Info_ValueForKey_linux "Info_SetValueForStarKey"
#define SV_CheckForDuplicateNames_linux "SV_CheckForDuplicateNames"
#define SV_ConnectionlessPacket_linux "SV_ConnectionlessPacket"
#define Con_Printf_linux "Con_Printf"
#define COM_UnMunge_linux "COM_UnMunge"
#define SafeFileDownload_linux "IsSafeFileToDownload"
#define SV_RejectConnection_linux "SV_RejectConnection"
#define COM_FileWrite_linux "COM_WriteFile"
#define SV_ProcessFile_linux "SV_ProcessFile"
#define FS_Open_linux "FS_Open"
#define Netchan_CheckForCompletion_linux "Netchan_CheckForCompletion" // Netchan_CopyFileFragments
#define SV_RunCmd_linux "SV_RunCmd"
#define SV_New_f_linux "SV_New_f"
#define SV_AddIP_f_linux "SV_AddIP_f"
#define SV_Rcon_f_linux "SV_Rcon"
#define Host_user_flinux "SV_Users_f"

//my settings 
#define varmax 33
#define a_max 32
#define b_max 44
#define string1 "You were detected for ^3"
#define string3 "%s User ^"%s^" with IP (%s) has been detected for %s [%d/%d]"
#define string4 "%s The connection from ^"%s^" has been detected for %s [%d/%d]"
#define string5 "%s User ^"%s^" with IP (%s) has been detected for %s ||| Argument : %s %s [%d/%d]"
#define string6 "%s Console has been detected for %s ||| Argument : %s %s [%d/%d]"
#define string17 "%s The connection from (%s) has been detected for %s %s"
#define string7 "%s User ^"%s^" with IP (%s) has been detected for %s"
#define string72 "%s The connection from (%s) has been detected for %s"
#define string8 "%s User ^"%s^" with IP (%s) has been detected for %s"
#define string9 "%s The connection from ^"%s^" has been detected for %s ||| Argument : %s [%d/%d]"
#define string10 "%s User ^"%s^" with IP (%s) has been detected for %s ||| Argument : %s"
#define Pmax 0x21
#define V0nr 0x00
#define V1nr 0x01
#define V2nr 0x02
#define V3nr 0x03
#define V4nr 0x04
#define MAX_BUFFER_IP 32
#define console_max 255
//


//globalll
new PrintUnknown
new mungelimit[varmax],getip[varmax],getip2[varmax],memory,memory2,holax,SV_RconCvar,LimitPrintfRcon
new Array:cslBlock, g_ConsoleStr,hola,fuck,memhack
new LimitResources,VAC
new limitb[varmax],local,limita[varmax],limit[varmax]
new GameData,SendBadDropClient,ParseConsistencyResponse,NameProtector,Queryviewer
enum net_adr {
	type=0x00,
	ip[0x04]=0x04
}
enum {
	BUFFER_MAXIM = 64
}
new overflowed[33];
new savefilename[100],savedata[100]
new Array: g_aArray,Array: g_blackList;
new messagelong[102]
new PrintUnMunge
new usercheck[33]
new checkuser[33]
new MaxOverflowed;
new tralala;
new LimitExploit,LimitQuery,LimitImpulse,locala

[varmax],LimitPrintf,LimitMunge,PauseDlfile,BanTime;
new KillBug;
new OrpheuFunction:long
//


new const MessageHook[][]={
	"#cstrike_","#career_","#vac_","#serverbrowser_","#cam_","#valve_",
	"#ba_","#t0","#of","#player","#vgui_","#spec","#spect","#steam","#gameui_","#app_",
	"#admin_","#game_","#czero_","#obs_","#WizardPanel_","#QueryBox_",
	
	
	"#textentry_","#FileOpenDialog","#PropertyDialog","#MessageBox_OK","#Frame_","#SysMenu_","#IME","%s",
	"#Team_Select", "#Team_Select_Spect", "#IG_Team_Select", "#IG_Team_Select_Spect", 
	
	"#IG_VIP_Team_Select", "#IG_VIP_Team_Select_Spect", 
	
	"#Terrorist_Select",
	"#CT_Select", "#Buy", "#CT_BuyItem", "#T_BuyItem", "#DCT_BuyItem", "#DT_BuyItem", 
	
	"#CT_BuyPistol", "#T_BuyPistol", "#AS_BuyShotgun", 
	
	"#BuyShotgun",
	"#CT_BuySubMachineGun", "#T_BuySubMachineGun", "#AS_CT_BuySubMachineGun", 
	
	"#AS_T_BuySubMachineGun", "#T_BuyRifle", "#CT_BuyRifle", 
	
	"#AS_T_BuyRifle",
	"#AS_CT_BuyRifle", "#AS_T_BuyMachineGun", "#BuyMachineGun", "#RadioA", "#RadioB", "#RadioC", 
	
	"#AK47", "#SG552", "#M4A1", "#Famas", "#Galil", 
	
	"#Aug", "#Scout",
	"#ArcticWarfareMagnum", "#G3SG1", "#SG550", "#USP45", "#Glock18", "#DesertEagle", "#P228", 
	
	"#Beretta96G", "#FiveSeven", "#Super90", "#XM1014", 
	
	"#mp5navy", "#tmp",
	"#FNP90", "#Mac10", "#UMP45", "#M249", "#Krieg552", "#M4A1_Short", "#Schmidt", "#Magnum", 
	
	"#D3AU1", "#Krieg550", "#KM45Tactical", 
	
	"#Sidearm9X19mm", "#NightHawk",
	"#P228Compact", "#Dual40", "#ESFiveSeven", "#Leone12", "#AutoShotgun", "#SubMachineGun", 
	
	"#SchmidtMP", "#ESC90", "#Mac10_Short", "#KMUMP45", 
	
	"#ESM249", "#TEAMS",
	"#PLAYERS", "#CLASS", "#SCORE", "#DEATHS", "#LATENCY", "#VOICE", "#Menu_OK", "#Menu_Cancel", 
	
	"#Menu_Spectate", "#Team_AutoAssign", 
	
	"#Target_Bombed", "#VIP_Escaped",
	"#VIP_Assassinated", "#Terrorists_Escaped", "#CTs_PreventEscape", 
	
	"#Escaping_Terrorists_Neutralized", "#Bomb_Defused", "#CTs_Win", 
	
	"#Terrorists_Win", "#Round_Draw",
	"#All_Hostages_Rescued", "#Target_Saved", "#Hostages_Not_Rescued", "#Terrorists_Not_Escaped", 
	
	"#VIP_Not_Escaped", "#Cannot_Buy_This", 
	
	"#Not_Enough_Money", "#Weapon_Not_Available",
	"#Already_Have_Kevlar", "#Already_Have_Kevlar_Helmet", "#Already_Have_Kevlar_Bought_Helmet", 
	
	"#Cannot_Carry_Anymore", "#Already_Have_One", 
	
	"#Cannot_Switch_From_VIP", "#All_Teams_Full",
	"#Terrorists_Full", "#CTs_Full", "#Too_Many_Terrorists", "#Too_Many_CTs", "#Wait_3_Seconds", 
	
	"#Only_1_Team_Change", 
	
	"#Ignore_Broadcast_Messages", "#Ignore_Broadcast_Team_Messages",
	"#Accept_All_Messages", "#Ignore_Radio", "#Accept_Radio", "#Command_Not_Available", 
	
	"#Defusing_Bomb_With_Defuse_Kit", 
	
	"#Defusing_Bomb_Without_Defuse_Kit", "#Killed_Hostage",
	"#Injured_Hostage", "#Auto_Team_Balance_Next_Round", "#All_VIP_Slots_Full", 
	
	"#Killed_Teammate", "#Banned_For_Killing_Teammates", 
	
	"#Cannot_Vote_Map", "#Weapon_Cannot_Be_Dropped",
	"#Terrorist_Escaped", "#C4_Plant_At_Bomb_Spot", "#C4_Plant_Must_Be_On_Ground", 
	
	"#C4_Arming_Cancelled", "#Bomb_Planted", 
	
	"#C4_Activated_At_Bomb_Spot", "#Switch_To_BurstFire",
	"#Switch_To_SemiAuto", "#Switch_To_FullAuto", "#TRAINING1", "#TRAINING2", "#TRAINING3", 
	
	"#TRAINING4", "#TRAINING5", "#TRAINING6", "#TRAINING7", 
	
	"#GAMESAVED", "#Cannot_Vote_Need_More_People",
	"#Map_Vote_Extend", "#Cannot_Vote_With_Less_Than_Three", "#Cover_me", "#You_take_the_point", 
	
	"#Hold_this_position", "#Regroup_team", 
	
	"#Follow_me", "#Taking_fire", "#Go_go_go", "#Team_fall_back",
	"#Stick_together_team", "#Get_in_position_and_wait", "#Storm_the_front", "#Report_in_team", 
	
	"#Affirmative", "#Roger_that", "#Enemy_spotted", 
	
	"#Need_backup", "#Sector_clear", "#In_position",
	"#Reporting_in", "#Get_out_of_there", "#Negative", "#Enemy_down", "#Hostage_down", 
	
	"#Fire_in_the_hole", "#Cant_buy", "#VIP_cant_buy", 
	
	"#CT_cant_buy", "#Terrorist_cant_buy", "#Vote", "#Votes",
	"#Friend", "#Enemy", "#Hostage", "#Health", "#Map_descr_not_avail", "#Class_descr_not_avail", 
	
	"#Phoenix_Connexion", "#L337_Krew", 
	
	"#Arctic_Avengers", "#Guerilla_Warfare", "#Auto_Select",
	"#Seal_Team_6", "#GSG_9", "#SAS", "#GIGN", "#Kevlar", "#Kevlar_Vest", "#Kevlar_Helmet", 
	
	"#Kevlar_Vest_Ballistic_Helmet", "#Flashbang", 
	
	"#HE_Grenade", "#High_Explosive_Grenade", "#Smoke_Grenade",
	"#Defusal_Kit", "#Bomb_Defusal_Kit", "#NightVision", "#Nightvision_Goggles", "#TactShield", 
	
	"#TactShield_Desc", "#Pistols", "#Buy_pistols", 
	
	"#Shotguns", "#Buy_shotguns", "#SMGs", "#Buy_smgs",
	"#Rifles", "#Buy_rifles", "#MachineGuns", "#Buy_machineguns", "#Prim_Ammo", "#Buy_prim_ammo", 
	
	"#Sec_Ammo", "#Buy_sec_ammo", "#Equipment", 
	
	"#Buy_equipment", "#Terrorist_Forces", "#CT_Forces",
	"#VIP", "#WINS", "#BOMB", "#DEAD", "#SCORES", "#Player", "#Player_plural", "#Got_defuser", 
	
	"#Got_bomb", "#Mic_Volume", "#Speaker_Volume", 
	
	"#Voice_Properties", "#Cannot_Be_Spectator",
	"#Map_Description_not_available", "#Muted", "#Unmuted", "#No_longer_hear_that_player", 
	
	"#OBS_NONE", "#OBS_CHASE_LOCKED", "#OBS_CHASE_FREE", 
	
	"#OBS_ROAMING", "#OBS_IN_EYE", "#OBS_MAP_FREE",
	"#OBS_MAP_CHASE", "#SPECT_OPTIONS", "#CAM_OPTIONS", "#Name_change_at_respawn", 
	
	"#C4_Defuse_Must_Be_On_Ground", "#Spectators", "#Unassigned", 
	
	"#Only_CT_Can_Move_Hostages", "#Selection_Not_Available",
	"#Alias_Not_Avail", "T0A0TITLE", "C0A0TITLE", "C0A1TITLE", "C1A1TITLE", "C1A2TITLE", 
	
	"C1A3TITLE", "C1A4TITLE", "C2A1TITLE", "C2A2TITLE", 
	
	"C2A3TITLE", "C2A4TITLE1", "C2A4TITLE2", "C2A5TITLE",
	"C3A1TITLE", "C3A2TITLE", "C4A1TITLE", "C4A1ATITLE", "C4A2TITLE", "C4A3TITLE", 
	
	"C5TITLE","","","",""
}
new const CommandAllowInpfnClientConnect[][]={
	"sendres","dlfile","new","sendents","_","amxxauth","connect","U","V","TSource",
	"rcon","getchallenge","challenge","dropclient","setinfo","Vwóµ9","specmode","unpause","vban","VModEnable","Uwóµ9","Uwóµ9"
}
new const SafeDownload[][]={
	".cfg",".dll",".asi",".ini",".amxx",
	".sma",".so",".mix",".sav",".log",".ztmp",".sys",
	".exe",".vbs",".lst",".com","xeno.wad","pak0.pak",".dylib",
	"iga_static.wad","itsitaly.wad","torntextures.wad","de_storm.wad",
	"de_piranesi.wad","de_airstrip.wad","de_aztec.wad","	.wad",
	"cs_office.wad","cs_bdog.wad","cs_cbble.wad","chateau.wad",
	"halflife.wad","cs_havana.wad","..","\",":"
}
new const RadioCommand[][] = {
	"coverme","takepoint","holdpos","regroup","followme","takingfire","go",
	"fallback","sticktog","getingpos","stormfront","report","enemyspot","needbackup",
	"sectorclear","inposition","reportingin","getout","negative","enemydown","radio1",
	"radio2","radio3"
}
new const ShieldServerCvarBlock[][]={
	"exit","host_killtime","addip","motdfile","motd_write","quit","shutdownserver",
	"user","hostname","sv_timeout","cd","motd","alias","rcon_password","stuffcmds"
}

//WINDOWS SIGNATURE
new SV_Spawn_f[] = {
	0x55,0x8B,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x23,0xDEF,0xDEF,0xDEF,
	0xDEF,0xDEF,0xDEF,0x45,0xDEF,0xDEF,0xDEF,0x50,0xDEF,
	0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF
	//0x55,0x8B,0xEC,0xDEF,0x14,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x45,0xDEF,0xDEF,0xDEF,0x50,0xDEF,0xDEF,0xDEF,//0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x83,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF
}
new SV_Addip[] = {
	0x55,0x8B,0xEC,0x83,0xEC,0x18,0x53,0x56,0x57,0xE8,0xDEF,0xDEF,0xDEF,0xDEF,
	0x83,0xF8,0x03,0x74,0xDEF,0x68,0xDEF,0xDEF,0xDEF,0xDEF,0xE8,0xDEF,0xDEF,0xDEF,0xDEF,0x83,
	0xC4,0x04,0x5F,0x5E,0x5B,0x8B,0xE5,0x5D,0xC3
}
new SV_SendBan_windows[] = {
	0x55,0x8B,0xEC,0xDEF,0xDEF,0x40,0x56,0x57,0x68,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x45,0xDEF
}
new SV_ParseConsistencyResponse[] = {
	0x55,0x8B,0xEC,0x81,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,
	0x53,0x56,0x57,0x33,0xDEF,0xDEF,
	0xDEF,0xDEF,0x45,0xDEF,0x89,0x45,0xDEF,0x50,
	0xDEF,0x45,0x88,0x50,0xDEF,0x80,0xDEF,0xDEF,0xDEF
}

new Host_kill_f[] = {
	0x8B,0x0D,0xDC,0x5D,0xDEF,0xDEF,0xDEF,0x81,0xDEF,0xDEF,
	0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF
}
new Host_kill_f6153[] = {
	0x8B,0x0D,0xDC,0x5D,0xDEF,0xDEF,0xDEF,0x81,0xDEF,0xDEF,
	0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF
}
new Con_Printf_f[] = {
	0x55,0x8B,0xEC,0xB8,0xDEF,0x10,0xDEF,0xDEF,0xE8,0xDEF,0xDEF,
	0xDEF,0xDEF,0x8B,0x4D,0xDEF,0x8D,0x45,0x0C,0xDEF,0x51,
	0x8D,0x95,0xDEF,0xDEF,0xDEF,0xDEF,0x68,0xDEF,0x10,0xDEF,0xDEF
}
new NET_GetLong_windows[] = {
	0x55,0x8B,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x53,
	0x56,0x57,0xDEF,0x41,0xDEF,0xDEF,0x49,0xDEF,0xDEF,0x4D,
	0xDEF,0xDEF,0x45,0xDEF,0xDEF,0x5D,0xDEF,0xDEF,0xDEF,0xDEF,
	0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,
	0xDEF,0xDEF,0xDEF,0xDEF
}
new SV_RejectConnection[] = {
	0x55,0x8B,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,
	0xDEF,0x56,0xDEF,0x45,0xDEF,0x57,0x50,0x51,0xDEF,0xDEF,
	0xDEF,0xDEF,0xDEF,0xDEF,0x68,0xDEF,0xDEF,0xDEF,0xDEF,0x52
}
new SV_SendRes_f[] = {
	0x55,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,
	0xDEF,0xDEF,0x6A,0xDEF,0xDEF,0x45,0xDEF,0x6A,0xDEF,0x50,0xDEF,
	0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,
	0xDEF,0xDEF,0xDEF
}
new SV_DropClient[] = {
	0x55,0x8B,0xDEF,0x81,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x8B,0x4D,
	0xDEF,0x53,0x56,0x8D,0x45,0xDEF,0x57,0x50,0x51,0x8D,0x95
}
new Host_User_f6153[] = {
	0xA1,0xDEF,0x4A,0xDEF,0xDEF,0x85,0xDEF,0x75,0xDEF,0x68,
	0xDEF,0x67,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF
}
new Host_User_f[] = {
	0x53,0x56,0x57,0x68,0xDEF,0x50,0xDEF,
	0xDEF,0x33,0xDEF,0xDEF,0xDEF,0x23,0xDEF,0xDEF,0x68,0xDEF
}
new SV_ConnectClient[] = {
	0x55,0x8B,0xEC,0x81,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,
	0x53,0x56,0x57,0xB9,0x05,0xDEF,0xDEF,0xDEF,0xBE,0xDEF,
	0xDEF,0xDEF,0xDEF,0x8D,0xDEF,0xDEF,0x33,0xDB,0x68,
	0xDEF,0xDEF,0xDEF,0xDEF
}
new COM_FileWrite[] = {
	0x55,0x8B,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x45,0xDEF,0x56,0x50,0x68,0xDEF
}
new clc_res[] = {
	0x55,0x8B,0xEC,0x83,0xEC,0x24,0x53,0x56,0x57,0xE8,
	0xDEF,0xDEF,0xDEF,0xDEF,0x8B,0xF0,0xA1
}
new voice_data[] = {
	0x55,0x8B,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,
	0xDEF,0xDEF,0xDEF,0xDEF,0x8B,0xDEF,0x84,0xDEF,0xDEF,0xDEF,0x56,0x8B
}
new SV_Rcon[] = {
	0x55,0x8B,0xEC,0x81,0xEC,0x04,0x06,0xDEF,0xDEF,0x53,0x56,0x57
}
new Netchan_CheckForCompletion[] = {
	0x55,0x8B,0xEC,0x83,0xDEF,0xDEF,0xDEF,0x45,0xDEF,0x53,0x56,0x57,0xDEF,0xDEF,0xDEF,0x33,
	0xDEF,0x8B,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x85,0xDEF,0x74,0x48,0x33,0xDEF,0x43,0xDEF
	//0x55,0x8B,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0x45,0xDEF,0xDEF,0xDEF,0xDEF,0x53,
	//0x56,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x57,0x33,0xDEF,0x33,0xDEF,0xDEF,
	//0xDEF,0x74,0x55,0xDEF,0x56
}

new Netchan_CheckForCompletion4554[] = {
	0x55,0x8B,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0x45,0xDEF,0xDEF,0xDEF,0xDEF,0x53,
	0x56,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x57,0x33,0xDEF,0x33,0xDEF,0xDEF,
	0xDEF,0x74,0x55,0xDEF,0x56
}
new SV_CheckForDuplicateNames_win[] = {
	0x55,0x8B,0xEC,0x83,0xDEF,0x48,0xDEF,0x45,0xDEF,0x53,0x56,0x57,
	0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x68,0x38,0xDEF,0xDEF,
	0xDEF,0x53,0xDEF,0x45,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF
}
new SV_CheckForDuplicateNames_wio[] = {
	0x55,0x8B,0xEC,0x83,0xEC,0xDEF,0x56,0x57,0xDEF,0xDEF,
	0xDEF,0x68,0xDEF,0x56,0xDEF,0xDEF,0x57,0xDEF,0x45,0xDEF,
	0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x45,0xDEF,0xDEF,0xDEF,
	0xDEF,0xDEF,0xDEF
	//0x55,0x8B,0xEC,0x83,0xDEF,0xDEF,0x56,0x57,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,
	//0x57,0xDEF,0x45,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x45,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF // 7xxx 5xxx
}
new SV_ProcessFile[] = {
	0x55,0x8B,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0x45,0xDEF,0x53,0x56,0x57,0xDEF,0x38,0xDEF,0x74
}
new Info_SetValueForKey_f[] = {
	0x55,0x8B,0xEC,0xDEF,0x45,0xDEF,0xDEF,0x38,0x2A,0x75,0xDEF,0x68,0xDEF,0xDEF,0xDEF,0xDEF 
}
new SVC_PingSignature[] = { 
	0x55, 0x8B, 0xDEF, 0x83, 0xDEF, 0xDEF, 0x56, 0x57, 0x0C 
}

new IsSafeFileDownload6153[] = {
	0x55,0x8B,0xEC,0x81,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x45,0xDEF,0x57,0x85,0xDEF,0xDEF,
	0x84,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x50,0xDEF,0x85,0xDEF,0xDEF,0xDEF
	//0x55,0x8B,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0x00,0x00,0xDEF,0x45,0xDEF,0x57,0xDEF,0xDEF,0xDEF,
	//0xDEF,0x71,0xDEF,0x00,0x00,0x68,0xDEF,0xDEF,0x00,0x00,0x50,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,
	//0xDEF,0x50,0xDEF,0xDEF,0x65,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x51,0xDEF,0xDEF,
	//0x6A,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF
}
new Host_Status_f[] = {
	0x55,0x8B,0xEC,0x81,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,
	0xDEF,0x53,0x56,0x57,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x33,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x89,0xDEF,0xDEF,0x89
}
new Host_Status_f6153[] = {
	0x55,0x8B,0xDEF,0x81,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xA1,0xDEF,0xDEF,0xDEF,0xDEF,
	0x53,0x56,0x57,0xBF,0xDEF,0xDEF,0xDEF,0xDEF,0x33,0xDEF,0x8B,0xDEF,0x3B,0xDEF,0x89,0xDEF,0xDEF,0x89,0xDEF,0xDEF,0x89
}
new IsSafeFileDownload4554[] = {
	0x55,0x8b,0xec,0x56,0x8b,0x75,0xDEF,0x85,0xf6,
	0x57,0x0f,0x84,0xDEF,0xDEF,0xDEF,0xDEF,0x6A,0x04
}
new SV_New_fw[] = {
	0x55,0x8B,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,
	0xDEF,0x43,0x22,0xDEF,0xDEF,0x53,0x56,0x57
}
new SV_New_fw6153[] = {
	0x55,0x8B,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x43,
	0xDEF,0xDEF,0xDEF,0x53,
	0x56,0x57,0x33,0xDEF,0xDEF,0xDEF,0xDEF,0x45,0xDEF,0x57,
	0x50,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF
}
new COM_UnMunges4554[] = {
	//0x55,0x8B,0xEC,0x83,0xDEF,0xDEF,0xDEF,0x45,0xDEF,0xDEF,0x45,0xDEF,0x00,0x00,0x00,0x00 // com_munge
	//0x55,0x8B,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x54,0xDEF,0xDEF,0xDEF,0x33,0xDEF,0x53,0xDEF //process
	0x55,0x8B,0xEC,0x51,0xDEF,0x45,0xDEF,0x53,0x24,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF //com_unmunge
	//0x55,0x8B,0xEC,0xDEF,0x55,0xDEF,0xDEF,0x45,0xDEF,0x53,0xDEF,0xDEF,0xDEF,0x56,0x57,0xDEF validate
	//0x55,0x8B,0xEC,0x51,0xDEF,0x45,0xDEF,0x53,0x24,0xDEF,0x33,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF // com_munge2
	//0x55,0x8B,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0x45,0xDEF,0xDEF,0x45,0xDEF,0x00,0x00,0x00,0x00 // com_unmunge2
	//0x55,0x8B,0xEC,0x83,0xEC,0x24,0x53,0x56,0x57,0xE8,0xDEF,0xDEF,0xDEF,0xDEF,0x8B,0xF0,0xA1 // sv_parseResourceList
	//0x55,0x8B,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0x45,0xDEF,0x53,0x56,0x57,0xDEF,0x38,0xDEF,0x74 // sv_processfile
	//0x55,0x8B,0xEC,0xDEF,0xDEF,0x34,0xDEF,0x00,0x00,0x53,0x56,0x57,0xDEF,0xDEF,0xDEF,0x33 //netchan
}
new SV_ParseStringCommand[] = {
	0x00
}
new SV_RunCmd[] = {
	0x55,0x8B,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x45,0xDEF,
	0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x33,0xDEF,0x53
}
new FS_Open[] = {	
	0x55,0x8B,0xEC,0x8B,0x55,0xDEF,0x8B,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,
	0x6A,0xDEF,0x52,0x8B,0x55,0xDEF,0x8B,0x01,0x52,0xFF,0xDEF,0x28 
}
new COM_UnMunges6153[] = {
	0x55,0x8B,0xEC,0xDEF,0x45,0xDEF,0x56,0xDEF,0x75,0xDEF,0x57,0xDEF,0xDEF,0xDEF,0x56,0x50
	//0x55,0x8B,0xEC,0x83,0xDEF,0xDEF,0xDEF,0x45,0xDEF,0xDEF,0x45,0xDEF,0x00,0x00,0x00,0x00 // com_munge
	//0x55,0x8B,0xEC,0x51,0xDEF,0x45,0xDEF,0x53,0x24,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF //com_unmunge
	//0x55,0x8B,0xEC,0x51,0xDEF,0x45,0xDEF,0x53,0x24,0xDEF,0x33,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF // com_munge2
	//0x55,0x8B,0xEC,0xDEF,0x45,0xDEF,0x56,0xDEF,0x75,0xDEF,0x57,0xDEF,0xDEF,0xDEF,0x56,0x50
	//0x55,0x8B,0xEC,0x81,0xEC,0xDEF,0xDEF,0xDEF,0xDEF,0x56,0xB1,0xDEF, //sv_begindownload
	//0xB0,0xDEF,0x57,0xC6,0xDEF,0xDEF,0xDEF,0xC6,0xDEF,0xDEF,0xDEF,0xC6,0xDEF,0xDEF,0xDEF,0x88 // end
}
new Host_Say_f[] = {
	0x55,0x8b,0xec,0x81,0xec,0xDEF,0xDEF,0xDEF,0xDEF,0xa1,
	0xDEF,0xDEF,0xDEF,0xDEF,0x57,0x85,0xc0,0x74,0xDEF,0x83,
	0x3d,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x0f,0x85,0xDEF,0xDEF,
	0xDEF,0xDEF,0xe8,0xDEF,0xDEF,0xDEF,0xDEF,0x5f,0x8b,0xe5,
	0x5d,0xc3,0xe8,0xDEF,0xDEF,0xDEF,0xDEF,0x83,0xf8,0xDEF,
	0x0f,0x8c,0xDEF,0xDEF,0xDEF,0xDEF,0xe8,0xDEF,0xDEF,0xDEF,
	0xDEF,0x8b,0xf8,0x85,0xff,0x89,0x7d,0xDEF,0x0f,0x84,0xDEF,
	0xDEF,0xDEF,0xDEF,0xa1,0xDEF,0xDEF,0xDEF,0xDEF,0x89,0x45,
	0xDEF,0x8a,0x07
}
new SV_ConnectionlessPacket6153[] = {
	0x56,0x57,0xDEF,0x39,0xDEF,0xDEF,0xDEF,0xDEF,
	0x64,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF
}
new SV_ConnectionlessPacket4554[] = {
	0x55,0xDEF,0xDEF,0x51,0x53,0x56,0x57,0xDEF,0xDEF,0xDEF,0xDEF,
	0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0xDEF,0x50,
	0xDEF,0x45,0xDEF
}

new const me[][]={"SkillartzHD","1.0.7","HLDS-Shield"}
stock pfnServerPrint(msg[]){server_print("%s %s",PrefixProtection,msg);} // fara any:...
stock Argv(){new text[console_max];read_argv(V0nr,text,charsmax(text)); return text;}
stock Args(){new text[console_max];read_args(text,charsmax(text)); return text;}
stock Register(){ register_plugin(me[0x00],me[0x01],me[0x02]);}
stock Argv1(){new text[console_max];read_argv(V1nr,text,charsmax(text)); return text;}
stock Argv2(){new text[console_max];read_argv(V2nr,text,charsmax(text)); return text;}
stock Argv3(){new text[console_max];read_argv(V3nr,text,charsmax(text)); return text;}
stock Argv4(){new text[console_max];read_argv(V4nr,text,charsmax(text)); return text;}
stock UserName(index){new PlayerName[Pmax];get_user_name(index,PlayerName,charsmax(PlayerName));return PlayerName;}
stock SV_RejectConnection_user(index,message[]){message_begin(0x01,0x02,_,index);write_string(message);message_end();} 
stock CL_Print(index,message[]){message_begin(0x01,0x08,_,index);write_string(message);message_end();}
stock CL_CenterPrint(index,message[]){message_begin(0x01,0x1A,_,index);write_string(message);write_byte(0x01);message_end();}
stock CL_Final(index,message[]){message_begin(0x01,0x1F,_,index);write_string(message);message_end();}
stock SVC_PrintConsole(index,msg[]){message_begin(0x01,0x08,_,index);write_string(msg);message_end();}
stock PlayerIP(index){new PlayerIPBAN[32];get_user_ip(index,PlayerIPBAN,charsmax(PlayerIPBAN),1);return PlayerIPBAN;}
stock GetUserID(index){new GetID;GetID = get_user_userid(index);return GetID;}
stock Add_MSG_ReadShort(){
	long=OrpheuGetFunction("MSG_ReadShort")
	return OrpheuCall(long)
}
stock SV_ForceFullClientsUpdate(){
	long2=OrpheuGetFunction("SV_ForceFullClientsUpdate")
	return OrpheuCall(long2)
}

stock Add_MSG_ReadLong(){
	long=OrpheuGetFunction("MSG_ReadLong")
	return OrpheuCall(long)
}
stock Add_SV_Drop_f(){
	long=OrpheuGetFunction("SV_Drop_f")
	return OrpheuCall(long)
}
stock SV_UpTime(function){
	new Float:ft = Float:engfunc(EngFunc_Time)
	new it = floatround(ft)
	new seconds = it % 60,minutes = (it / 60) % 60,hours = (it / 3600) % 24,day = it / 86400
	
	if(function == 1){
		server_print("%s UpTime Days:%i/Hours:%i/:Minutes:%i/:Seconds:%i^n",PrefixProtection,day,hours,minutes,seconds)
	}
	if(function == 2){
		log_to_file(settings,"%s UpTime Days:%i/Hours:%i/:Minutes:%i/:Seconds:%i^n",PrefixProtection,day,hours,minutes,seconds)
	}
}
stock ErrorSignature()
{
	new function[200]
	formatex(function,charsmax(function),"%s i don't found this function :",PrefixProtection)
	switch(memory){
		case 1:log_to_file(settings,"%s SV_Spawn_f",function)
			case 2:log_to_file(settings,"%s SV_SendRes_f",function)
			case 3:log_to_file(settings,"%s Host_Say_f",function)
			case 4:log_to_file(settings,"%s NET_GetLong",function)
			case 5:log_to_file(settings,"%s SV_ConnectClient",function)
			case 6:log_to_file(settings,"%s SV_RejectConnection",function)
			case 7:log_to_file(settings,"%s Con_Printf",function)
			case 8:log_to_file(settings,"%s SV_ConnectionlessPacket",function)
			case 9:log_to_file(settings,"%s Set_ValueForKey",function)
			case 10:log_to_file(settings,"%s SV_DropClient",function)
			case 11:log_to_file(settings,"%s COM_UnMunge",function)
			case 12:log_to_file(settings,"%s IsSafeFileToDownload",function)
			case 13:log_to_file(settings,"%s Netchan_CheckForCompletion",function)
			case 14:log_to_file(settings,"%s SV_ProcessFile",function)
			case 15:log_to_file(settings,"%s FS_Open",function)
			case 16:log_to_file(settings,"%s COM_FileWrite",function)
			case 17:log_to_file(settings,"%s SV_RunCmd",function)
			case 18:log_to_file(settings,"%s SV_New_f",function)
			case 19:log_to_file(settings,"%s SV_Addip_f",function)
			case 20:log_to_file(settings,"%s SV_Rcon",function)
			case 21:log_to_file(settings,"%s SV_ParseResourceList",function)
			case 22:log_to_file(settings,"%s SV_ParseVoiceData",function)
			case 23:log_to_file(settings,"%s SV_ParseStringCommand",function)
			case 24:log_to_file(settings,"%s Cmd_ExecuteString",function)
			case 25:log_to_file(settings,"%s Host_Kill_f hooked with fakemeta",PrefixProtection)
			case 26:log_to_file(settings,"%s SV_CheckForDuplicateNames",function)
			case 27:log_to_file(settings,"%s SV_SendBan",function)
			case 28:log_to_file(settings,"%s Host_Users_f",function)
			case 29:log_to_file(settings,"%s Host_Status_f",function)
		}
}
stock RconRandom()
{
	new bitch[200],RconVar[100]
	get_cvar_string("rcon_password",RconVar,charsmax(RconVar))
	formatex(bitch,charsmax(bitch)," %c%c%c%c%c%c%c%c%c%c%c%c%c%c",
	random_num('A','Z'),random_num('1','9'),random_num('a','z'),random_num('a','z'),random_num('a','z'),random_num('a','z'),
	random_num('A','Z'),random_num('1','9'),random_num('a','z'),random_num('A','Z'),random_num('1','9'),random_num('a','z'),
	random_num('A','Z'),random_num('1','9'),random_num('a','z'),random_num('A','Z'),random_num('1','9'),random_num('a','z'))
	server_cmd("rcon_password %s",bitch)
	server_print("%s I changed rcon old password : ^"%s^"  with new password : ^"%s^"",PrefixProtection,RconVar,bitch)
}
stock net_adrr()
{
	static id;
	if(!id) 
	{
		
		if((id = okapi_engine_get_symbol_ptr(SVC_PingSignature_linux))){return id;}
		new funcAddress = okapi_engine_find_sig(SVC_PingSignature,sizeof SVC_PingSignature);
		if(funcAddress)
		{
			new bytes[0x44];
			okapi_get_ptr_array( funcAddress,bytes,sizeof bytes)
			new address = okapi_engine_ptr_find_byte_at( funcAddress,0xBE)
			if(address){return okapi_get_ptr_int(address+1);}
		}
	}
	return id;
}
stock HLDS_Shield_func(index,print,msg[],emit,log,pedeapsa)
{
	new data[net_adr],value[1500],buffer[120],getip[MAX_BUFFER_IP],bomba[200],bomba2[200],bomba3[200]
	read_argv(0x04,value,charsmax(value))
	BufferName(value,charsmax(value),buffer)
	
	if(print==0x01){
		client_print_color(index,index,"^4%s^1 %s%s ^1(%s) [^4%d^1/^3%d^1]",PrefixProtection,string1,msg,PlayerIP(index),locala
		
		[index],get_pcvar_num(LimitPrintf))
	}
	else if(print==0x02){
		formatex(bomba,charsmax(bomba),"%s You has been detected for %s (%s)^n",PrefixProtection,msg,PlayerIP(index))
		CL_Print(index,bomba)
	}
	else if(print==0x03){
		formatex(bomba3,charsmax(bomba3),"%s Sorry %s is disabled on server^n",PrefixProtection,msg)
		CL_Print(index,bomba3)
	}
	if(emit== 0x01){
		client_cmd(index,"spk doop")
	}
	if(log==0x01){
		if(locala[index]==get_pcvar_num(LimitPrintf)){
			return PLUGIN_HANDLED
		}
		else{
			log_to_file(settings,string3,PrefixProtection,UserName(index),PlayerIP(index),msg,locala[index],get_pcvar_num(LimitPrintf))
		}
	}
	else if(log==0x05){
		if(locala[index]==get_pcvar_num(LimitPrintf)){
			return PLUGIN_HANDLED
		}
		else{
			if(localas[index]){
				if(localas[index] >=get_pcvar_num(LimitPrintf)){
					localas[index]=0x00
					return okapi_ret_supercede
				}
				log_to_file(settings,string5,PrefixProtection,UserName(index),PlayerIP(index),msg,Argv(),Args(),localas[index],get_pcvar_num(LimitPrintf))
			}
			else{
				if(locala[index] >=get_pcvar_num(LimitPrintf)){
					locala[index]=0x00
					return okapi_ret_supercede
				}
				log_to_file(settings,string5,PrefixProtection,UserName(index),PlayerIP(index),msg,Argv(),Args(),locala[index],get_pcvar_num(LimitPrintf))
			}
		}
	}
	else if(log==0x06){
		if(locala[index]==get_pcvar_num(LimitPrintf)){
			return PLUGIN_HANDLED
		}
		else{
			log_to_file(settings,string6,PrefixProtection,msg,Argv(),Args(),locala[index],get_pcvar_num(LimitPrintf))
		}
	}
	else if(log==0x02){
		okapi_get_ptr_array(net_adrr(),data,net_adr)
		formatex(getip,charsmax(getip),"%d.%d.%d.%d",data[ip][0x00], data[ip][0x01], data[ip][0x02], data[ip][0x03])
		if(locala[index]==get_pcvar_num(LimitPrintf)){
			return PLUGIN_HANDLED
		}
		else{
			log_to_file(settings,string3,PrefixProtection,buffer,getip,msg,locala[index],get_pcvar_num(LimitPrintf))
		}
	}
	else if(log==0x03){
		okapi_get_ptr_array(net_adrr(),data,net_adr)
		formatex(getip,charsmax(getip),"%d.%d.%d.%d",data[ip][0x00], data[ip][0x01], data[ip][0x02], data[ip][0x03])
		if(locala[index]==get_pcvar_num(LimitPrintf)){
			return 0
		}
		else{
			log_to_file(settings,string4,PrefixProtection,getip,msg,locala[index],get_pcvar_num(LimitPrintf))
		}
	}
	else if(log==0x07){
		//okapi_get_ptr_array(net_adrr(),data,net_adr)
		//formatex(getip,charsmax(getip),"%d.%d.%d.%d",data[ip][0x00], data[ip][0x01], data[ip][0x02], data[ip][0x03])
		//log_to_file(settings,string4,PrefixProtection,getip,msg,floodtimer,get_pcvar_num(LimitSV_ConnectClient))
	}
	else if(log==0x08){
		if(!strlen(buffer)){
			okapi_get_ptr_array(net_adrr(),data,net_adr)
			formatex(getip,charsmax(getip),"%d.%d.%d.%d",data[ip][0x00], data[ip][0x01], data[ip][0x02], data[ip][0x03])
			log_to_file(settings,string72,PrefixProtection,getip,msg)
			return 0
		}
		okapi_get_ptr_array(net_adrr(),data,net_adr)
		formatex(getip,charsmax(getip),"%d.%d.%d.%d",data[ip][0x00], data[ip][0x01], data[ip][0x02], data[ip][0x03])
		log_to_file(settings,string7,PrefixProtection,buffer,getip,msg)
		return 1;
	}
	else if(log==17){
		log_to_file(settings,string17,PrefixProtection,PlayerIP(index),msg,savedata)
	}
	else if(log==0x09){
		okapi_get_ptr_array(net_adrr(),data,net_adr)
		formatex(getip,charsmax(getip),"%d.%d.%d.%d",data[ip][0x00], data[ip][0x01], data[ip][0x02], data[ip][0x03])
		log_to_file(settings,string8,PrefixProtection,buffer,getip,msg)
	}
	else if(log==10){
		log_to_file(settings,string6,PrefixProtection,msg,Argv(),Args(),hola,get_pcvar_num(LimitPrintf))
	}
	else if(log==11){
		okapi_get_ptr_array(net_adrr(),data,net_adr)
		formatex(getip,charsmax(getip),"%d.%d.%d.%d",data[ip][0x00], data[ip][0x01], data[ip][0x02], data[ip][0x03])
		log_to_file(settings,string4,PrefixProtection,getip,msg,hola,get_pcvar_num(LimitPrintf))
	}
	else if(log==12){
		log_to_file(settings,"%s The connection ^"%s^" was added in SV_ReadPackets for ^"%s^" minutes",PrefixProtection,Argv2(),Argv1())
	}
	else if(log==13){
		log_to_file(settings,"%s I found a bug in SV_AddIP_f , returned",PrefixProtection)
	}
	else if(log==14){
		okapi_get_ptr_array(net_adrr(),data,net_adr)
		formatex(getip,charsmax(getip),"%d.%d.%d.%d",data[ip][0x00], data[ip][0x01], data[ip][0x02], data[ip][0x03])
		log_to_file(settings,string9,PrefixProtection,getip,msg,Args(),hola,get_pcvar_num(LimitPrintfRcon))
	}
	else if(log==15){
		log_to_file(settings,"%s I found suspicious file %s (Name: %s IP: %s)",PrefixProtection,savefilename,UserName(index),PlayerIP

(index))
	}
	else if(log==16){
		log_to_file(settings,string10,PrefixProtection,UserName(index),PlayerIP(index),msg,Argv(),hola)
	}
	if(pedeapsa==0x01){
		formatex(bomba2,charsmax(bomba2),"%s You has been detected for %s (%s) || Arguments %s %s^n",PrefixProtection,msg,PlayerIP

(index),Argv(),Args())
		SV_RejectConnection_user(index,bomba2)
		server_cmd("kick #%d %s",GetUserID(index),bomba2)
	}
	else if(pedeapsa ==0x02){
		SV_RejectConnection_user(index,bomba)
		server_cmd("addip %d %s",get_pcvar_num(BanTime),PlayerIP(index))
	}
	else if(pedeapsa==0x03){
		replace_all(buffer,0x21,"%"," ")
		server_cmd("kick ^"%s^" %s",buffer,bomba)
	}
	else if(pedeapsa==0x04){
		okapi_get_ptr_array(net_adrr(),data,net_adr)
		formatex(getip,charsmax(getip),"%d.%d.%d.%d",data[ip][0x00], data[ip][0x01], data[ip][0x02], data[ip][0x03])
		server_cmd("addip %d %s",get_pcvar_num(BanTime),getip)
	}
	else if(pedeapsa==0x05){
		replace_all(buffer,0x21,"%"," ")
		server_cmd("kick ^"%s^" %s",buffer,bomba)
	}
	return 1
}
#define orpheufile1 "addons/amxmodx/configs/orpheu/functions/Cmd_ExecuteString"
#define orpheufile2 "addons/amxmodx/configs/orpheu/functions/MSG_ReadShort"
#define orpheufile3 "addons/amxmodx/configs/orpheu/functions/MSG_ReadLong"
#define orpheufile4 "addons/amxmodx/configs/orpheu/functions/SV_Drop_f"
#define orpheufile5 "addons/amxmodx/configs/orpheu/functions/SV_ForceFullClientsUpdate"
#define orpheufile6 "addons/amxmodx/configs/orpheu/functions/SV_ConnectionlessPacket"


stock Create_Signature(address[]){
	
	new build[varmax]
	get_cvar_string("sv_version",build,charsmax(build))
	
	if(equali(address,"Cmd_ExecuteString")){
		new cmdexecutestrinfile = fopen(orpheufile1,"wb")
		fprintf(cmdexecutestrinfile,"{")
		fprintf(cmdexecutestrinfile,"^"name^"       : ^"Cmd_ExecuteString^",")
		fprintf(cmdexecutestrinfile,"^"library^"    : ^"engine^",")
		fprintf(cmdexecutestrinfile,"^"arguments^"  :")
		fprintf(cmdexecutestrinfile,"[")
		fprintf(cmdexecutestrinfile,"{")
		fprintf(cmdexecutestrinfile,"^"type^" : ^"int^"")
		fprintf(cmdexecutestrinfile,"},")
		fprintf(cmdexecutestrinfile,"{")
		fprintf(cmdexecutestrinfile,"^"type^" : ^"int^"")
		fprintf(cmdexecutestrinfile,"}")
		fprintf(cmdexecutestrinfile,"],") // 1
		fprintf(cmdexecutestrinfile,"^"identifiers^":")
		fprintf(cmdexecutestrinfile,"[")
		fprintf(cmdexecutestrinfile,"{")
		fprintf(cmdexecutestrinfile,"^"os^"    : ^"windows^",")
		if(equali(build,"1.1.2.7,48,6153")){
			fprintf(cmdexecutestrinfile,"^"value^" : [0x55,0x8B,0xEC,0x8B,^"*^",^"*^",^"*^",0x45,^"*^",0x56,0x51,^"*^",^"*^",^"*^",0x69,^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",0x83,^"*^",^"*^",^"*^",0x23,^"*^",^"*^",^"*^",0x85,^"*^",^"*^"]")
		}
		else{
			fprintf(cmdexecutestrinfile,"^"value^" : [0x55,0x8B,0xEC,0x8B,0x4D,^"*^",0x8B,0x45,^"*^",0x56,0x51,^"*^",^"*^",0x34,^"*^",^"*^",^"*^",0x6B,^"*^",^"*^",^"*^",^"*^",^"*^",^"*^"]")
		}
		fprintf(cmdexecutestrinfile,"},")
		fprintf(cmdexecutestrinfile,"{")
		fprintf(cmdexecutestrinfile,"^"os^"    : ^"linux^",")
		fprintf(cmdexecutestrinfile,"^"value^" : ^"Cmd_ExecuteString^"")
		fprintf(cmdexecutestrinfile,"}")
		fprintf(cmdexecutestrinfile,"]")
		fprintf(cmdexecutestrinfile,"}")
		fclose(cmdexecutestrinfile)
	}
	if(equali(address,"MSG_ReadShort")){
		new msgshortfile = fopen(orpheufile2,"wb")
		fprintf(msgshortfile,"{")
		fprintf(msgshortfile,"^"name^"       : ^"MSG_ReadShort^",")
		fprintf(msgshortfile,"^"library^"    : ^"engine^",")
		fprintf(msgshortfile,"^"return^"  :")
		fprintf(msgshortfile,"{")
		fprintf(msgshortfile,"^"type^" : ^"int^"")
		fprintf(msgshortfile,"},")
		fprintf(msgshortfile,"^"identifiers^":")
		fprintf(msgshortfile,"[")
		fprintf(msgshortfile,"{")
		fprintf(msgshortfile,"^"os^"    : ^"windows^",")
		fprintf(msgshortfile,"^"value^" : [0x55,0x8B,0xEC,0x83,0xEC,^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",0x45,^"*^",^"*^",0x45,^"*^",^"*^",^"*^",^"*^",^"*^",0x45,^"*^",^"*^"]")
		fprintf(msgshortfile,"},")
		fprintf(msgshortfile,"{")
		fprintf(msgshortfile,"^"os^"    : ^"linux^",")
		fprintf(msgshortfile,"^"value^" : ^"MSG_ReadShort^"")
		fprintf(msgshortfile,"}")
		fprintf(msgshortfile,"]")
		fprintf(msgshortfile,"}")
		fclose(msgshortfile)
	}
	if(equali(address,"SV_Drop_f")){
		new svdropffile = fopen(orpheufile4,"wb")
		fprintf(svdropffile,"{")
		fprintf(svdropffile,"^"name^"       : ^"SV_Drop_f^",")
		fprintf(svdropffile,"^"library^"    : ^"engine^",")
		fprintf(svdropffile,"^"return^"  :")
		fprintf(svdropffile,"{")
		fprintf(svdropffile,"^"type^" : ^"bool^"")
		fprintf(svdropffile,"},")
		fprintf(svdropffile,"^"identifiers^":")
		fprintf(svdropffile,"[")
		fprintf(svdropffile,"{")
		fprintf(svdropffile,"^"os^"    : ^"windows^",")
		if(equali(build,"1.1.2.7,48,6153")){
			fprintf(svdropffile,"^"value^" : [0xE8,0x4D,0xA0,^"*^",^"*^",^"*^",0x7C,^"*^",0x66,^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",0x50,0x68,^"*^"]")
		}
		else{
			fprintf(svdropffile,"^"value^" : [0xE8,0x1D,0xA1,^"*^",^"*^",^"*^",^"*^",0x45,^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",0x50,0x68,0x60]")
		}
		fprintf(svdropffile,"},")
		fprintf(svdropffile,"{")
		fprintf(svdropffile,"^"os^"    : ^"linux^",")
		fprintf(svdropffile,"^"value^" : ^"SV_Drop_f^"")
		fprintf(svdropffile,"}")
		fprintf(svdropffile,"]")
		fprintf(svdropffile,"}")
		fclose(svdropffile)
	}
	if(equali(address,"MSG_ReadLong")){
		new msgreadlongfile = fopen(orpheufile3,"wb")
		fprintf(msgreadlongfile,"{")
		fprintf(msgreadlongfile,"^"name^"       : ^"MSG_ReadLong^",")
		fprintf(msgreadlongfile,"^"library^"    : ^"engine^",")
		fprintf(msgreadlongfile,"^"return^"  :")
		fprintf(msgreadlongfile,"{")
		fprintf(msgreadlongfile,"^"type^" : ^"long^"")
		fprintf(msgreadlongfile,"},")
		fprintf(msgreadlongfile,"^"identifiers^":")
		fprintf(msgreadlongfile,"[")
		fprintf(msgreadlongfile,"{")
		fprintf(msgreadlongfile,"^"os^"    : ^"windows^",")
		fprintf(msgreadlongfile,"^"value^" :[0x8B,0x0D,^"*^",^"*^",^"*^",^"*^",0xA1,^"*^",^"*^",^"*^",^"*^",0x57,0x8D,0x79,0x04,0x3B,0xF8,0x7E,0x0F,0xC7,0x05,^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",0x83,0xC8,0xFF,0x5F,0xC3,0x56,0x8B,0x35,^"*^",^"*^",^"*^",^"*^",0x33,0xC0,0x33,0xD2,0x8A,0x44,0x0E,0x03,0x8A,0x54,0x0E,0x02,0xC1,0xE0,0x08,0x03,0xC2,0x33,0xD2,0x8A,0x54,0x0E,0x01,0x89,0x3D,^"*^",^"*^",^"*^",^"*^",0xC1,0xE0,0x08,0x03,0xC2,0x33,0xD2,0x8A,0x14,0x0E,0x5E,0xC1,0xE0,0x08,0x03,0xC2,0x5F,0xC3]")
		fprintf(msgreadlongfile,"},")
		fprintf(msgreadlongfile,"{")
		fprintf(msgreadlongfile,"^"os^"    : ^"linux^",")
		fprintf(msgreadlongfile,"^"value^" : ^"MSG_ReadLong^"")
		fprintf(msgreadlongfile,"}")
		fprintf(msgreadlongfile,"]")
		fprintf(msgreadlongfile,"}")
		fclose(msgreadlongfile)
	}
	if(equali(address,"SV_ForceFullClientsUpdate")){
		new updateclient = fopen(orpheufile5,"wb")
		fprintf(updateclient,"{")
		fprintf(updateclient,"^"name^"       : ^"SV_ForceFullClientsUpdate^",")
		fprintf(updateclient,"^"library^"    : ^"engine^",")
		fprintf(updateclient,"^"return^"  :")
		fprintf(updateclient,"{")
		fprintf(updateclient,"^"type^" : ^"bool^"")
		fprintf(updateclient,"},")
		fprintf(updateclient,"^"identifiers^":")
		fprintf(updateclient,"[")
		fprintf(updateclient,"{")
		fprintf(updateclient,"^"os^"    : ^"windows^",")
		fprintf(updateclient,"^"value^" : [0x55,0x8B,0xEC,^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",0x56,0x57,^"*^",^"*^",^"*^",0x45,^"*^",0x6A,^"*^",0x50,^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",0x35,0x84,^"*^",^"*^",^"*^",0x83,^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^"]")
		fprintf(updateclient,"},")
		fprintf(updateclient,"{")
		fprintf(updateclient,"^"os^"    : ^"linux^",")
		fprintf(updateclient,"^"value^" : ^"SV_ForceFullClientsUpdate^"")
		fprintf(updateclient,"}")
		fprintf(updateclient,"]")
		fprintf(updateclient,"}")
		fclose(updateclient)
		}
	if(equali(address,"SV_ConnectionslessPacket")){
		new queryserver = fopen(orpheufile6,"wb")
		fprintf(queryserver,"{")
		fprintf(queryserver,"^"name^"       : ^"SV_ConnectionlessPacket^",")
		fprintf(queryserver,"^"library^"    : ^"engine^",")
		fprintf(queryserver,"^"arguments^"  :")
		fprintf(queryserver,"[")
		fprintf(queryserver,"{")
		fprintf(queryserver,"^"type^" : ^"char *^"")
		fprintf(queryserver,"}")
		fprintf(queryserver,"],")
		fprintf(queryserver,"^"identifiers^":")
		fprintf(queryserver,"[")
		fprintf(queryserver,"{")
		fprintf(queryserver,"^"os^"    : ^"windows^",")
		fprintf(queryserver,"^"value^" : [0x56,0x57,^"*^",0x39,^"*^",^"*^",^"*^",^"*^",0x64,^"*^",^"*^",^"*^",^"*^",^"*^",^"*^",^"*^"]")
		fprintf(queryserver,"},")
		fprintf(queryserver,"{")
		fprintf(queryserver,"^"os^"    : ^"linux^",")
		fprintf(queryserver,"^"value^" : ^"SV_ConnectionlessPacket^"")
		fprintf(queryserver,"}")
		fprintf(queryserver,"]")
		fprintf(queryserver,"}")
		fclose(queryserver)
	}

}
stock PrintUnknown_function(id)
{
	new longfuckgame[200]
	
	if(id){
		formatex(longfuckgame,charsmax(longfuckgame),"%s Unknown command: ^"%s^" Sendend by (%s-%s)",PrefixProtection,Argv(),UserName(id),PlayerIP(id))
		
	}
	else{
		formatex(longfuckgame,charsmax(longfuckgame),"%s Unknown command: ^"%s^" Sendend by server console",PrefixProtection,Argv())
	}
	if(strlen(Argv())){
		switch(get_pcvar_num(PrintUnknown)){
			case 1:server_print(longfuckgame)
				case 2:log_to_file(settings,longfuckgame)
			}
	}
	return 0
}
stock BufferName(info[],size,name[],size_name = 31) // nu pune mai mare decat 31
{
	new heh = 0x00;
	if ((heh = containi(info, "\name\") ) != -1){
		heh += 0x06;
		new len = 0x00;
		while(info[heh] != '\' && info[heh] != '"' && len < size_name && heh < size)
			name[len++] = info[heh++];
		
		name[len] = EOS;
	}
	else{
		name[0x00] = EOS;
	}
}
stock cmpStr(str[]) {
	
	static strCsl[142], i
	for(i = 0x00; i < g_ConsoleStr; i++){
		ArrayGetString(cslBlock, i, strCsl, charsmax(strCsl))
		if(containi(str, strCsl) != -0x01)
			return true
	}
	return false
}

public Register_Settings()
{
	#define dirmax "addons/amxmodx/configs/settings"
	
	if(file_exists(loc))
		//server_print("%s I loaded file (%s)",PrefixProtection,loc)
	if(file_exists(loc2)){
		server_cmd("exec %s",loc2)
		server_print("%s I loaded file (%s)",PrefixProtection,loc2)
	}
	else{
		new FileVar = fopen(loc2,"wb")
		server_print("%s I created file (%s)",PrefixProtection,loc2)
		fprintf(FileVar,"//shield_replace_string ^"status^" ^"statu3^"^n")
		fprintf(FileVar,"//shield_remove_string ^"rcon^"^n")
		fprintf(FileVar,"//shield_addcmd_fake ^"kick2^" ^"1^"^n")
		fprintf(FileVar,"//shield_shield_fake_cvar ^"podbot^" ^"hello^"^n")
		fprintf(FileVar,"//shield_remove_function <function>^n^n")
		
		fprintf(FileVar,"shield_update_vgui_client 1^n")
		fprintf(FileVar,"shield_namebug_showmenu 1^n")
		fprintf(FileVar,"shield_vgui_specbug 1^n")
		fprintf(FileVar,"shield_radio 1^n")
		fprintf(FileVar,"shield_cmdbug 1^n")
		fprintf(FileVar,"shield_ilegalcmd 1^n")
		fprintf(FileVar,"shield_name_bug_on_server 1^n")
		fprintf(FileVar,"shield_name_spammer 1^n")
		fprintf(FileVar,"shield_steamid_hack 1^n")
		fprintf(FileVar,"shield_steamid_duplicate 1^n")
		fprintf(FileVar,"shield_name_protector_sv_connect 1^n")
		fprintf(FileVar,"shield_kill_crash 1^n")
		fprintf(FileVar,"shield_query_log 0^n")
		fprintf(FileVar,"shield_vac 1^n")
		fprintf(FileVar,"shield_max_overflowed 1000^n")
		fprintf(FileVar,"shield_printf_decrypt_munge 0^n")
		fprintf(FileVar,"shield_printf_offset_command 0^n")
		fprintf(FileVar,"shield_parseConsistencyResponse 1^n")
		fprintf(FileVar,"shield_dropclient 1^n")
		fprintf(FileVar,"shield_gamedata HLDS-Shield 1.0.7^n")
		fprintf(FileVar,"shield_printf_limit 5^n")
		fprintf(FileVar,"shield_query_limit 40^n")
		fprintf(FileVar,"shield_munge_comamnd_limit 15^n")
		fprintf(FileVar,"shield_exploit_cmd_limit 5^n")
		fprintf(FileVar,"shield_sv_runcmd_limit 100^n")
		fprintf(FileVar,"shield_sv_parseresource_limit 1^n")
		fprintf(FileVar,"shield_bantime 1^n")
		fprintf(FileVar,"shield_dlfile_pause 1^n")
		fprintf(FileVar,"shield_sv_rcon 1^n")
		fprintf(FileVar,"shield_rcon_limit 10^n")

		fprintf(FileVar,"^nRemove // for disable hook function^n")

		fprintf(FileVar,"//shield_remove_function host_status_f^n")
		fprintf(FileVar,"//shield_remove_function sv_spawn_f^n")
		fprintf(FileVar,"//shield_remove_function sv_sendres^n")
		fprintf(FileVar,"//shield_remove_function sv_say^n")
		fprintf(FileVar,"//shield_remove_function sv_getlong^n")
		fprintf(FileVar,"//shield_remove_function sv_connectclient^n")
		fprintf(FileVar,"//shield_remove_function sv_conprintf^n")
		fprintf(FileVar,"//shield_remove_function sv_conneclesspacket^n")
		fprintf(FileVar,"//shield_remove_function sv_rejectconnection^n")
		fprintf(FileVar,"//shield_remove_function com_unmunge^n")
		fprintf(FileVar,"//shield_remove_function sv_infovaluekey^n")
		fprintf(FileVar,"//shield_remove_function sv_dropclient^n")
		fprintf(FileVar,"//shield_remove_function IsSafeFileToDownload^n")
		fprintf(FileVar,"//shield_remove_function netchan_check^n")
		fprintf(FileVar,"//shield_remove_function sv_processfile^n")
		fprintf(FileVar,"//shield_remove_function sv_stringcommand^n")
		fprintf(FileVar,"//shield_remove_function fs_open^n")
		fprintf(FileVar,"//shield_remove_function com_writeflie^n")
		fprintf(FileVar,"//shield_remove_function sv_parseresouces^n")
		fprintf(FileVar,"//shield_remove_function sv_addip^n")
		fprintf(FileVar,"//shield_remove_function cmd_executestring^n")
		fprintf(FileVar,"//shield_remove_function sv_sendban^n")
		fprintf(FileVar,"//shield_remove_function sv_resourceslist^n")
		fprintf(FileVar,"//shield_remove_function sv_checkforduplicatenames^n")
		fprintf(FileVar,"//shield_remove_function host_kill_f^n")
		fprintf(FileVar,"//shield_remove_function sv_voicedata^n")
		fprintf(FileVar,"//shield_remove_function sv_new_f^n")
		fprintf(FileVar,"//shield_remove_function sv_sendban^n")
		fprintf(FileVar,"//shield_remove_function sv_runcmd^n")
		fprintf(FileVar,"//shield_remove_function host_users_f^n")

		fclose(FileVar)
	}
	if(file_exists(locatie)){
		//server_print("%s I loaded file (%s)",PrefixProtection,settings)
	}
	else{
		server_print("%s I created file (%s)",PrefixProtection,locatie)
		new FileVar = fopen(locatie,"wb")
		fprintf(FileVar,"")
		fclose(FileVar)
	}
	if(file_exists(settings)){
		//server_print("%s I loaded file (%s)",PrefixProtection,settings)
	}
	else{
		server_print("%s I created file (%s)",PrefixProtection,settings)
		new FileVar = fopen(settings,"wb")
		fprintf(FileVar,"")
		fclose(FileVar)
	}
	if(dir_exists(dirmax)){
		//server_print("%s I loaded dir (%s)",PrefixProtection,dirmax)
	}
	else{
		server_print("%s I created dir (%s)",PrefixProtection,dirmax)
		mkdir(dirmax)
	}
}
public ThisCommandNow(){ server_print("%s This function ^"%s^" is disabled",PrefixProtection,Argv1());}

public RegisterRemoveFunction(){
	
	if(!strlen(Argv1())){
		server_print("shield_remove_function <function>")
		return 0;
	}
	
	if(containi(Argv1(),"host_status_f") != -0x01){
		if(statushook){
			okapi_del_hook(statushook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_spawn_f") != -0x01){
		if(spawnhook){
			okapi_del_hook(spawnhook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_sendres") != -0x01){
		if(sendreshook){
			okapi_del_hook(sendreshook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_say") != -0x01){
		if(sayhook){
			okapi_del_hook(sayhook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_getlong") != -0x01){
		if(netgethook){
			okapi_del_hook(netgethook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_connectclient") != -0x01){
		if(connecthook){
			okapi_del_hook(connecthook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_conprintf") != -0x01){
		if(printfhook){
			okapi_del_hook(printfhook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_conneclesspacket") != -0x01){
		if(queryhook){
			okapi_del_hook(queryhook)
		}
		else if(queryhook2){
			OrpheuUnregisterHook(queryhook2)
		}
		else{
			ThisCommandNow();
		}
	}	
	else if(containi(Argv1(),"sv_rejectconnection") != -0x01){
		if(rejecthook){
			okapi_del_hook(rejecthook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"com_unmunge") != -0x01){
		if(mungehook){
			okapi_del_hook(mungehook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_infovaluekey") != -0x01){
		if(infovaluehook){
			okapi_del_hook(infovaluehook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_dropclient") != -0x01){
		if(dropclienthook){
			okapi_del_hook(dropclienthook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"IsSafeFileToDownload") != -0x01){
		if(safefilehook){
			okapi_del_hook(safefilehook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"netchan_check") != -0x01){
		if(netchanhook){
			okapi_del_hook(netchanhook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_processfile") != -0x01){
		if(processhook){
			okapi_del_hook(processhook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"fs_open") != -0x01){
		if(openfilehook){
			okapi_del_hook(openfilehook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"com_writeflie") != -0x01){
		if(writefilehook){
			okapi_del_hook(writefilehook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_new_f") != -0x01){
		if(newhook){
			okapi_del_hook(newhook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_addip") != -0x01){
		if(addiphook){		
			okapi_del_hook(addiphook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_rcon") != -0x01){
		if(rconhook){
			okapi_del_hook(rconhook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_resourceslist") != -0x01){
		if(resourceslisthook){
			okapi_del_hook(resourceslisthook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_voicedata") != -0x01){
		if(voicehook){
			okapi_del_hook(voicehook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_stringcommand") != -0x01){
		if(stringcmdhook){
			
			okapi_del_hook(stringcmdhook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_parseresouces") != -0x01){
		if(parsehook){
			okapi_del_hook(parsehook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"host_kill_f") != -0x01){
		if(killhook){
			okapi_del_hook(killhook)
		}
		else{
			ThisCommandNow();
			
		}
	}
	else if(containi(Argv1(),"sv_checkforduplicatenames") != -0x01){
		if(duplicatehook){
			okapi_del_hook(duplicatehook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"sv_sendban") != -0x01){
		if(sendbanhook){
			okapi_del_hook(sendbanhook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"cmd_executestring") != -0x01){
		if(executestringhook){
			OrpheuUnregisterHook(executestringhook)
		}
		else{
			ThisCommandNow();
		}
	}
	else if(containi(Argv1(),"host_users_f") != -0x01){
		if(userfhook){
			okapi_del_hook(userfhook)
		}
		else{
			ThisCommandNow();
			}
		}
	else if(containi(Argv1(),"sv_runcmd") != -0x01){
		if(runcmd){
			okapi_del_hook(runcmd)
		}
		else{
			ThisCommandNow();
		}
	}
	else{
		server_print("%s This function ^"%s^" don't exist registred",PrefixProtection,Argv1())
		return 0;
	}
	return 1	
}
public RegisterOkapiLinux()
{
	if(is_linux_server()){
		new statuslinux = okapi_engine_get_symbol_ptr(Host_Status_f_linux)
		new nameslinux = okapi_engine_get_symbol_ptr(SV_CheckForDuplicateNames_linux)
		new hostuserlinux = okapi_engine_get_symbol_ptr(Host_user_flinux)
		new badparselinux = okapi_engine_get_symbol_ptr(SV_ParseConsistencyResponse_linux)
		new hostkillf_linux = okapi_engine_get_symbol_ptr(Host_kill_f_linux)
		new infokeylinux = okapi_engine_get_symbol_ptr(Info_ValueForKey_linux)
		new queryserver6153linux = okapi_engine_get_symbol_ptr(SV_ConnectionlessPacket_linux)
		new printflinux = okapi_engine_get_symbol_ptr(Con_Printf_linux)
		new rejectlinux = okapi_engine_get_symbol_ptr(SV_RejectConnection_linux)
		new droplinux = okapi_engine_get_symbol_ptr(SV_DropClient_linux)
		new comfilelinux = okapi_engine_get_symbol_ptr(COM_FileWrite_linux)
		new connectlinux = okapi_engine_get_symbol_ptr(SV_ConnectClient_f_linux)
		new sendreslinux = okapi_engine_get_symbol_ptr(SV_SendRes_f_linux)
		new spawnlinux = okapi_engine_get_symbol_ptr(SV_Spawn_f_linux)
		new saylinux = okapi_engine_get_symbol_ptr(Host_Say_f_linux)
		new netlinux = okapi_engine_get_symbol_ptr(NET_GetLong_linux)
		new munge4554linux = okapi_engine_get_symbol_ptr(COM_UnMunge_linux)
		new safefile4554linux = okapi_engine_get_symbol_ptr(SafeFileDownload_linux)
		new netchannlinux = okapi_engine_get_symbol_ptr(Netchan_CheckForCompletion_linux)
		new processfilelinux = okapi_engine_get_symbol_ptr(SV_ProcessFile_linux)
		new fsopenlinux = okapi_engine_get_symbol_ptr(FS_Open_linux)
		new runcmdlinux = okapi_engine_get_symbol_ptr(SV_RunCmd_linux)
		new newflinux = okapi_engine_get_symbol_ptr(SV_New_f_linux)
		new addiplinux = okapi_engine_get_symbol_ptr(SV_AddIP_f_linux)
		new svrconlinux = okapi_engine_get_symbol_ptr(SV_Rcon_f_linux)
		new clc_resxlinux = okapi_engine_get_symbol_ptr(SV_Reslinux)
		new clc_voicedataxlinux = okapi_engine_get_symbol_ptr(SV_voicedatalinux)
		new clc_stringcmdlinux = okapi_engine_get_symbol_ptr(SV_ParseStringCommand_linux)
		
		if(spawnlinux){
			spawnhook = okapi_add_hook(okapi_build_function(spawnlinux,arg_int,arg_string,arg_int),"SV_Spawn_f_Hook")
			memory2++
		}
		else{ErrorSignature();memory=1;}
		if(sendreslinux){
			sendreshook = okapi_add_hook(okapi_build_function(sendreslinux,arg_int,arg_string,arg_int),"SV_SendRes_f_Hook")
			memory2++
		}
		else{ErrorSignature();memory=2;}
		if(saylinux){
			sayhook = okapi_add_hook(okapi_build_function(saylinux,arg_string),"Host_Say_f_Hook")
			memory2++
		}
		else{ErrorSignature();memory=3;}
		if(netlinux){
			netgethook = okapi_add_hook(okapi_build_function(netlinux,arg_int,arg_int),"NET_GetLong")
			memory2++
		}
		else{ErrorSignature();memory=4;}
		if(connectlinux){
			connecthook = okapi_add_hook(okapi_build_function(connectlinux,arg_int),"SV_ConnectClient_Hook")
			memory2++
		}
		else{ErrorSignature();memory=5;}
		if(rejectlinux){
			okapi_add_hook(okapi_build_function(rejectlinux,arg_int,arg_int,arg_string),"SV_RejectConnection_Hook")
			memory2++
		}
		else{ErrorSignature();memory=6;}
		if(printflinux){
			printfhook = okapi_add_hook(okapi_build_function(printflinux,arg_string,arg_string,arg_void),"Con_Printf_Hook")
			memory2++
		}
		else{ErrorSignature();memory=7;}
		if(queryserver6153linux){
			//nu stiu de da crash in 6153 linux dupa changelevel/reload 
			//queryhook = okapi_add_hook(okapi_build_function(queryserver6153linux,arg_string,arg_string),"SV_ConnectionlessPacket_Hook")
			if(file_exists(orpheufile6)){
				queryhook2 = OrpheuRegisterHook(OrpheuGetFunction("SV_ConnectionlessPacket"),"SV_ConnectionlessPacket_Hook")
				memory2++
			}
			else{
				log_to_file(settings,"%s Injected successfully %s",PrefixProtection,orpheufile6)
				Create_Signature("SV_ConnectionslessPacket")
				set_task(1.0,"debug_orpheu")
			}
		}	
		else{ErrorSignature();memory=8;}
		if(infokeylinux){
			infovaluehook = okapi_add_hook(okapi_build_function(infokeylinux,arg_string,arg_string,arg_string,arg_int),"Info_ValueForKey_Hook")
			memory2++
		}
		else{ErrorSignature();memory=9;}
		if(droplinux){
			dropclienthook = okapi_add_hook(okapi_build_function(droplinux,arg_int,arg_int,arg_string,arg_string),"SV_DropClient_Hook")
			memory2++
		}
		else{ErrorSignature();memory=10;}
		if(munge4554linux){
			safefilehook = okapi_add_hook(okapi_build_function(munge4554linux,arg_string,arg_int,arg_int),"COM_UnMunge")
			memory2++
		}
		else{ErrorSignature();memory=11;}	
		if(safefile4554linux){
			safefilehook = okapi_add_hook(okapi_build_function(safefile4554linux,arg_string),"IsSafeDownloadFile_Hook")
			memory2++
		}
		else{ErrorSignature();memory=12;}
		if(netchannlinux){
			netchanhook = okapi_add_hook(okapi_build_function(netchannlinux,arg_int,arg_int,arg_int,arg_int),"Netchan_CheckForCompletion_Hook")
			memory2++
		}
		else{ErrorSignature();memory=13;}
		if(processfilelinux){
			processhook = okapi_add_hook(okapi_build_function(processfilelinux,arg_string,arg_int,arg_int),"SV_ProcessFile_Hook")
			memory2++
		}
		else{ErrorSignature();memory=14;}
		if(fsopenlinux){
			openfilehook = okapi_add_hook(okapi_build_function(fsopenlinux,arg_string,arg_string),"FS_Open_Hook")
			memory2++
		}
		else{ErrorSignature();memory=15;}
		if(comfilelinux){
			writefilehook = okapi_add_hook(okapi_build_function(comfilelinux,arg_string,arg_void,arg_int),"COM_FileWrite_Hook")
			memory2++
		}
		else{ErrorSignature();memory=16;}
		if(runcmdlinux){
			runcmd = okapi_add_hook(okapi_build_function(runcmdlinux,arg_int),"SV_RunCmd_Hook")
			memory2++
		}
		else{ErrorSignature();memory=17;}
		if(newflinux){
			newhook = okapi_add_hook(okapi_build_function(newflinux,arg_void),"SV_New_f_Hook")
			memory2++
		}
		else{ErrorSignature();memory=18;}
		if(addiplinux){
			addiphook = okapi_add_hook(okapi_build_function(addiplinux,arg_void),"SV_Addip_f_Hook")
			memory2++
		}
		else{ErrorSignature();memory=19;}
		if(svrconlinux){
			rconhook = okapi_add_hook(okapi_build_function(svrconlinux,arg_string),"SV_Rcon_Hook")
			memory2++
		}
		else{ErrorSignature();memory=20;}
		if(clc_resxlinux){
			resourceslisthook = okapi_add_hook(okapi_build_function(clc_resxlinux,arg_void),"SV_ParseResourceList_Fix")
			memory2++
		}
		else{ErrorSignature();memory=21;}
		if(clc_voicedataxlinux){
			voicehook = okapi_add_hook(okapi_build_function(clc_voicedataxlinux,arg_void),"SV_ParseVoiceData_Fix")
			memory2++
		}
		else{ErrorSignature();memory=22;}
		if(clc_stringcmdlinux){
			stringcmdhook = okapi_add_hook(okapi_build_function(clc_stringcmdlinux,arg_void),"SV_ParseStringCommand_fix")
			memory2++
		}
		else{ErrorSignature();memory=23;}
		if(badparselinux){
			parsehook = okapi_add_hook(okapi_build_function(badparselinux,arg_void),"SV_ParseConsistencyResponse_fix")
			memory2++
		}
		else{ErrorSignature();memory=24;}
		if(hostkillf_linux){
			killhook = okapi_add_hook(okapi_build_function(hostkillf_linux,arg_void),"Host_Kill_f_fix")
			memory2++
		}
		else{ErrorSignature();memory=25;}
		if(nameslinux){
			duplicatehook = okapi_add_hook(okapi_build_function(nameslinux,arg_string,arg_int,arg_int),"SV_CheckForDuplicateNames")
			memory2++
		}
		else{ErrorSignature();memory=26;}
		if(hostuserlinux){
			userfhook = okapi_add_hook(okapi_build_function(hostuserlinux,arg_void),"Host_User_f_Reverse")
			memory2++
		}
		else{ErrorSignature();memory=28;}
		if(statuslinux){
			statushook = okapi_add_hook(okapi_build_function(statuslinux,arg_void),"SV_CheckPermisionforStatus")
			memory2++
		}
		else{ErrorSignature();memory=29;}
	}
	
}

public RegisterOkapiWindows(){
	new build[varmax]
	get_cvar_string("sv_version",build,charsmax(build))
	
	new status_cmd = okapi_engine_find_sig(Host_Status_f,charsmax(Host_Status_f))
	new status_cmd6153 = okapi_engine_find_sig(Host_Status_f6153,charsmax(Host_Status_f6153))
	new host_user = okapi_engine_find_sig(Host_User_f,charsmax(Host_User_f))
	new host_user6153 = okapi_engine_find_sig(Host_User_f6153,charsmax(Host_User_f6153))
	new nameswin = okapi_engine_find_sig(SV_CheckForDuplicateNames_win,charsmax(SV_CheckForDuplicateNames_win))
	new win_oldbuild = okapi_engine_find_sig(SV_CheckForDuplicateNames_wio,charsmax(SV_CheckForDuplicateNames_wio))
	new infokey = okapi_engine_find_sig(Info_SetValueForKey_f,charsmax(Info_SetValueForKey_f))
	new queryserver6153 = okapi_engine_find_sig(SV_ConnectionlessPacket6153,charsmax(SV_ConnectionlessPacket6153))
	new queryserver4554 = okapi_engine_find_sig(SV_ConnectionlessPacket4554,charsmax(SV_ConnectionlessPacket4554))
	new printf = okapi_engine_find_sig(Con_Printf_f,charsmax(Con_Printf_f))
	new reject = okapi_engine_find_sig(SV_RejectConnection,charsmax(SV_RejectConnection))
	new drop = okapi_engine_find_sig(SV_DropClient,charsmax(SV_DropClient))
	new comfile = okapi_engine_find_sig(COM_FileWrite,charsmax(COM_FileWrite))
	new connect = okapi_engine_find_sig(SV_ConnectClient,charsmax(SV_ConnectClient))
	new sendres = okapi_engine_find_sig(SV_SendRes_f,charsmax(SV_SendRes_f))
	new spawn = okapi_engine_find_sig(SV_Spawn_f,charsmax(SV_Spawn_f))
	new say = okapi_engine_find_sig(Host_Say_f,charsmax(Host_Say_f))
	new net = okapi_engine_find_sig(NET_GetLong_windows,charsmax(NET_GetLong_windows))
	new munge4554 = okapi_engine_find_sig(COM_UnMunges4554,charsmax(COM_UnMunges4554))
	new munge6153 = okapi_engine_find_sig(COM_UnMunges6153,charsmax(COM_UnMunges6153))
	new safefile6153 = okapi_engine_find_sig(IsSafeFileDownload6153,charsmax(IsSafeFileDownload6153))
	new safefile4554 = okapi_engine_find_sig(IsSafeFileDownload4554,charsmax(IsSafeFileDownload4554))
	new netchann = okapi_engine_find_sig(Netchan_CheckForCompletion,charsmax(Netchan_CheckForCompletion))
	new netchann4554 = okapi_engine_find_sig(Netchan_CheckForCompletion4554,charsmax(Netchan_CheckForCompletion4554))
	new processfile = okapi_engine_find_sig(SV_ProcessFile,charsmax(SV_ProcessFile))
	new fsopen = okapi_engine_find_sig(FS_Open,charsmax(FS_Open))
	new runcmdx = okapi_engine_find_sig(SV_RunCmd,charsmax(SV_RunCmd))
	new newf = okapi_engine_find_sig(SV_New_fw,charsmax(SV_New_fw))
	new newf6153 = okapi_engine_find_sig(SV_New_fw6153,charsmax(SV_New_fw6153))
	new parsebad = okapi_engine_find_sig(SV_ParseConsistencyResponse,charsmax(SV_ParseConsistencyResponse))
	new addip = okapi_engine_find_sig(SV_Addip,charsmax(SV_Addip))
	new svrcon = okapi_engine_find_sig(SV_Rcon,charsmax(SV_Rcon))
	new clc_resx = okapi_engine_find_sig(clc_res,charsmax(clc_res))
	new clc_voicedatax = okapi_engine_find_sig(voice_data,charsmax(voice_data))
	new clc_stringcmd = okapi_engine_find_sig(SV_ParseStringCommand,charsmax(SV_ParseStringCommand))
	new hostkillf = okapi_engine_find_sig(Host_kill_f,charsmax(Host_kill_f))
	new hostkillf6153 = okapi_engine_find_sig(Host_kill_f6153,charsmax(Host_kill_f6153))
	if(spawn){
		spawnhook = okapi_add_hook(okapi_build_function(spawn,arg_int,arg_string,arg_int),"SV_Spawn_f_Hook")
		memory2++
	}
	else{ErrorSignature();memory=1;}
	if(sendres){
		sendreshook = okapi_add_hook(okapi_build_function(sendres,arg_int,arg_string,arg_int),"SV_SendRes_f_Hook")
		memory2++
	}
	else{ErrorSignature();memory=2;}
	if(say){
		sayhook = okapi_add_hook(okapi_build_function(say,arg_string),"Host_Say_f_Hook")
		memory2++
	}
	else{ErrorSignature();memory=3;}
	if(net){
		netgethook = okapi_add_hook(okapi_build_function(net,arg_int,arg_int),"NET_GetLong")
		memory2++
	}
	else{ErrorSignature();memory=4;}
	if(connect){
		connecthook = okapi_add_hook(okapi_build_function(connect,arg_int),"SV_ConnectClient_Hook")
		memory2++
	}
	else{ErrorSignature();memory=5;}
	if(reject){
		rejecthook = okapi_add_hook(okapi_build_function(reject,arg_int,arg_int,arg_string),"SV_RejectConnection_Hook")
		memory2++
	}
	else{ErrorSignature();memory=6;}
	if(printf){
		printfhook = okapi_add_hook(okapi_build_function(printf,arg_string,arg_string,arg_void),"Con_Printf_Hook")
		memory2++
	}
	else{ErrorSignature();memory=7;}
	if(equali(build,"1.1.2.7,48,6153")){
		if(queryserver6153){
			if(file_exists(orpheufile6)){
				queryhook2 = OrpheuRegisterHook(OrpheuGetFunction("SV_ConnectionlessPacket"),"SV_ConnectionlessPacket_Hook")
				memory2++
			}
			else{
				log_to_file(settings,"%s Injected successfully %s",PrefixProtection,orpheufile6)
				Create_Signature("SV_ConnectionslessPacket")
				set_task(1.0,"debug_orpheu")
			}
			//queryhook = okapi_add_hook(okapi_build_function(queryserver6153,arg_string,arg_string),"SV_ConnectionlessPacket_Hook")
			//memory2++
		}
		else{ErrorSignature();memory=8;}
	}
	else{
		if(queryserver4554){
			queryhook = okapi_add_hook(okapi_build_function(queryserver4554,arg_string,arg_string),"SV_ConnectionlessPacket_Hook")
			memory2++
		}	
		else{ErrorSignature();memory=8;}
	}
	if(infokey){
		infovaluehook = okapi_add_hook(okapi_build_function(infokey,arg_string,arg_string,arg_string),"Info_ValueForKey_Hook")
		memory2++
	}
	else{ErrorSignature();memory=9;}
	
	if(drop){
		dropclienthook = okapi_add_hook(okapi_build_function(drop,arg_int,arg_int,arg_int,arg_string),"SV_DropClient_Hook")
		memory2++
	}
	else{ErrorSignature();memory=10;}
	
	if(equali(build,"1.1.2.7,48,6153")){
		if(munge6153){
			mungehook = okapi_add_hook(okapi_build_function(munge6153,arg_string,arg_int,arg_int),"COM_UnMunge")
			memory2++
		}
		else{ErrorSignature();memory=11;}
	}
	else{
		if(munge4554){
			mungehook = okapi_add_hook(okapi_build_function(munge4554,arg_string,arg_int,arg_int),"COM_UnMunge")
			memory2++
			//(qboolean server, netchan_t *chan, const char *filename, unsigned char *uncompressed_pbuf, int uncompressed_size)
		}
		else{ErrorSignature();memory=11;}	
	}
	if(equali(build,"1.1.2.7,48,6153")){
		if(safefile6153){
			safefilehook = okapi_add_hook(okapi_build_function(safefile6153,arg_string),"IsSafeDownloadFile_Hook")
			memory2++
		}
		else{ErrorSignature();memory=12;}
	}
	else{
		if(safefile4554){
			safefilehook = okapi_add_hook(okapi_build_function(safefile4554,arg_string),"IsSafeDownloadFile_Hook")
			memory2++
		}
		else{ErrorSignature();memory=12;}
	}
	if(equali(build,"1.1.2.7,48,6153")){
		if(netchann){
			netchanhook = okapi_add_hook(okapi_build_function(netchann,arg_int,arg_int,arg_int,arg_int),"Netchan_CheckForCompletion_Hook")
			memory2++
		}
		else{ErrorSignature();memory=13;}
	}
	else{
		if(netchann4554){
			netchanhook = okapi_add_hook(okapi_build_function(netchann4554,arg_int,arg_int,arg_int,arg_int),"Netchan_CheckForCompletion_Hook")
			memory2++
		}
		else{ErrorSignature();memory=13;}
	}
	if(processfile){
		processhook = okapi_add_hook(okapi_build_function(processfile,arg_string,arg_void,arg_int),"SV_ProcessFile_Hook")
		memory2++
	}
	else{ErrorSignature();memory=14;}
	if(fsopen){
		openfilehook = okapi_add_hook(okapi_build_function(fsopen,arg_string,arg_string),"FS_Open_Hook")
		memory2++
	}
	else{ErrorSignature();memory=15;}
	if(comfile){
		writefilehook = okapi_add_hook(okapi_build_function(comfile,arg_string,arg_void,arg_int),"COM_FileWrite_Hook")
		memory2++
	}
	else{ErrorSignature();memory=16;}
	if(runcmdx){
		runcmd = okapi_add_hook(okapi_build_function(runcmdx,arg_int),"SV_RunCmd_Hook")
		memory2++
	}
	else{ErrorSignature();memory=17;}
	if(equali(build,"1.1.2.7,48,6153")){
		if(newf6153){
			newhook = okapi_add_hook(okapi_build_function(newf6153,arg_void),"SV_New_f_Hook")
			memory2++
		}
		else{ErrorSignature();memory=18;}
	}
	else{
		if(newf){
			newhook = okapi_add_hook(okapi_build_function(newf,arg_void),"SV_New_f_Hook")
			memory2++
		}	
		else{ErrorSignature();memory=18;}
		memory2++
	}
	if(addip){
		addiphook =okapi_add_hook(okapi_build_function(addip,arg_void),"SV_Addip_f_Hook")
		memory2++
	}
	else{ErrorSignature();memory=19;}
	if(svrcon){
		rconhook = okapi_add_hook(okapi_build_function(svrcon,arg_string),"SV_Rcon_Hook")
		memory2++
	}
	else{ErrorSignature();memory=20;}
	if(clc_resx){
		resourceslisthook = okapi_add_hook(okapi_build_function(clc_resx,arg_void),"SV_ParseResourceList_Fix")
		memory2++
	}
	else{ErrorSignature();memory=21;}
	if(!equali(build,"1.1.2.7,48,6153")){
		if(clc_voicedatax){
			memory2++
			voicehook = okapi_add_hook(okapi_build_function(clc_voicedatax,arg_void),"SV_ParseVoiceData_Fix")
		}
		else{
		ErrorSignature();memory=22;}
	}
	if(clc_stringcmd){
		stringcmdhook = okapi_add_hook(okapi_build_function(clc_stringcmd,arg_void),"SV_ParseStringCommand_fix")
		memory2++
	}
	else{ErrorSignature();memory=23;}
	if(get_pcvar_num(ParseConsistencyResponse)==-1){
		if(parsebad){
			parsehook =	okapi_add_hook(okapi_build_function(parsebad,arg_void),"SV_ParseConsistencyResponse_fix")
			memory2++
		}
		else{ErrorSignature();memory=24;}
	}
	if(equali(build,"1.1.2.7,48,6153")){
		if(hostkillf6153){
			killhook = okapi_add_hook(okapi_build_function(hostkillf6153,arg_void),"Host_Kill_f_fix")
			memory2++
		}
		else{register_forward(FM_ClientKill,"Host_Kill_f_fix");memory=25,memory2++;}
	}
	else{
		if(hostkillf){
			killhook = okapi_add_hook(okapi_build_function(hostkillf,arg_void),"Host_Kill_f_fix")
			memory2++
		}
		else{register_forward(FM_ClientKill,"Host_Kill_f_fix");memory=25,memory2++;}
	}
	if(nameswin){
		if(equali(build,"1.1.2.7,48,6153")){
			duplicatehook = okapi_add_hook(okapi_build_function(nameswin,arg_string,arg_int,arg_int),"SV_CheckForDuplicateNames")
			memory2++
		}
	}
	else if(win_oldbuild){
		duplicatehook = okapi_add_hook(okapi_build_function(win_oldbuild,arg_string,arg_int,arg_int),"SV_CheckForDuplicateNames")
		memory2++
	}	
	else{ErrorSignature();memory=26;}
	if(host_user6153){
		userfhook = okapi_add_hook(okapi_build_function(host_user6153,arg_void),"Host_User_f_Reverse")
		memory2++
	}
	else if(host_user){
			userfhook = okapi_add_hook(okapi_build_function(host_user,arg_void),"Host_User_f_Reverse")
		}
	else{ErrorSignature();memory=28;}
	if(status_cmd6153){
		statushook = okapi_add_hook(okapi_build_function(status_cmd6153,arg_void),"SV_CheckPermisionforStatus")
		memory2++
	}
	else if(status_cmd){
			statushook = okapi_add_hook(okapi_build_function(status_cmd,arg_void),"SV_CheckPermisionforStatus")
		}
	else{ErrorSignature();memory=29;}
	
}
#if defined _colorchat_included
#endinput
#endif
#define _colorchat_included

/* ColorChat Support */
#define NORMAL DontChange
#define GREEN DontChange
#define TEAM_COLOR DontChange
#define RED Red
#define BLUE Blue
#define GREY Grey
#define ColorChat client_print_color
/* ColorChat Support */

enum _:Colors {
	DontChange,
	Red,
	Blue,
	Grey
}

stock const g_szTeamName[Colors][] = 
{
"UNASSIGNED",
"TERRORIST",
"CT",
"SPECTATOR"
}

stock client_print_color(id, iColor=DontChange, const szMsg[], any:...)
{
// check if id is different from 0
if( id && !is_user_connected(id) )
{
	return 0;
}

if( iColor > Grey )
{
	iColor = DontChange;
}

new szMessage[192];
if( iColor == DontChange )
{
	szMessage[0] = 0x04;
}
else
{
	szMessage[0] = 0x03;
}

new iParams = numargs();
// Specific player code
if(id)
{
	if( iParams == 3 )
	{
		copy(szMessage[1], charsmax(szMessage)-1, szMsg);
	}
	else
	{
		vformat(szMessage[1], charsmax(szMessage)-1, szMsg, 4);
	}
	
	if( iColor )
	{
		new szTeam[11]; // store current team so we can restore it
		get_user_team(id, szTeam, charsmax(szTeam));
		
		// set id TeamInfo in consequence
		// so SayText msg gonna show the right color
		Send_TeamInfo(id, id, g_szTeamName[iColor]);
		
		// Send the message
		Send_SayText(id, id, szMessage);
		
		// restore TeamInfo
		Send_TeamInfo(id, id, szTeam);
	}
	else
	{
		Send_SayText(id, id, szMessage);
	}
} 

// Send message to all players
else
{
	// Figure out if at least 1 player is connected
	// so we don't send useless message if not
	// and we gonna use that player as team reference (aka SayText message sender) for color change
	new iPlayers[32], iNum;
	get_players(iPlayers, iNum, "ch");
	if( !iNum )
	{
		return 0;
	}
	
	new iFool = iPlayers[0];
	
	new iMlNumber, i, j;
	new Array:aStoreML = ArrayCreate();
	if( iParams >= 5 ) // ML can be used
	{
		for(j=4; j<iParams; j++)
		{
			// retrieve original param value and check if it's LANG_PLAYER value
			if( getarg(j) == LANG_PLAYER )
			{
				i=0;
				// as LANG_PLAYER == -1, check if next parm string is a registered language translation
				while( ( szMessage[ i ] = getarg( j + 1, i++ ) ) ) {}
				if( GetLangTransKey(szMessage) != TransKey_Bad )
				{
					// Store that arg as LANG_PLAYER so we can alter it later
					ArrayPushCell(aStoreML, j++);
					
					// Update ML array saire so we'll know 1st if ML is used,
					// 2nd how many args we have to alterate
					iMlNumber++;
				}
			}
		}
	}
	
	// If arraysize == 0, ML is not used
	// we can only send 1 MSG_BROADCAST message
	if( !iMlNumber )
	{
		if( iParams == 3 )
		{
			copy(szMessage[1], charsmax(szMessage)-1, szMsg);
		}
		else
		{
			vformat(szMessage[1], charsmax(szMessage)-1, szMsg, 4);
		}
		
		if( iColor )
		{
			new szTeam[11];
			get_user_team(iFool, szTeam, charsmax(szTeam));
			Send_TeamInfo(0, iFool, g_szTeamName[iColor]);
			Send_SayText(0, iFool, szMessage);
			Send_TeamInfo(0, iFool, szTeam);
		}
		else
		{
			Send_SayText(0, iFool, szMessage);
		}
	}
	
	// ML is used, we need to loop through all players,
	// format text and send a MSG_ONE_UNRELIABLE SayText message
	else
	{
		new szTeam[11], szFakeTeam[10];
		
		if( iColor )
		{
			get_user_team(iFool, szTeam, charsmax(szTeam));
			copy(szFakeTeam, charsmax(szFakeTeam), g_szTeamName[iColor]);
		}
		
		for( i = 0; i < iNum; i++ )
		{
			id = iPlayers[i];
			
			for(j=0; j<iMlNumber; j++)
			{
				// Set all LANG_PLAYER args to player index ( = id )
				// so we can format the text for that specific player
				setarg(ArrayGetCell(aStoreML, j), _, id);
			}
			
			// format string for specific player
			vformat(szMessage[1], charsmax(szMessage)-1, szMsg, 4);
			
			if( iColor )
			{
				Send_TeamInfo(id, iFool, szFakeTeam);
				Send_SayText(id, iFool, szMessage);
				Send_TeamInfo(id, iFool, szTeam);
			}
			else
			{
				Send_SayText(id, iFool, szMessage);
			}
		}
		ArrayDestroy(aStoreML);
	}
}
return 1;
}

stock Send_TeamInfo(iReceiver, iPlayerId, szTeam[])
{
static iTeamInfo = 0;
if( !iTeamInfo )
{
	iTeamInfo = get_user_msgid("TeamInfo");
}
message_begin(iReceiver ? MSG_ONE_UNRELIABLE : MSG_BROADCAST, iTeamInfo, .player=iReceiver);
write_byte(iPlayerId);
write_string(szTeam);
message_end();
}

stock Send_SayText(iReceiver, iPlayerId, szMessage[])
{
static iSayText = 0;
if( !iSayText )
{
	iSayText = get_user_msgid("SayText");
}
message_begin(iReceiver ? MSG_ONE_UNRELIABLE : MSG_BROADCAST, iSayText, .player=iReceiver);
write_byte(iPlayerId);
write_string(szMessage);
message_end();
}

stock register_dictionary_colored(const filename[])
{
if( !register_dictionary(filename) )
{
	return 0;
}

new szFileName[256];
get_localinfo("amxx_datadir", szFileName, charsmax(szFileName));
format(szFileName, charsmax(szFileName), "%s/lang/%s", szFileName, filename);
new fp = fopen(szFileName, "rt");
if( !fp )
{
	log_amx("Failed to open %s", szFileName);
	return 0;
}

new szBuffer[512], szLang[3], szKey[64], szTranslation[256], TransKey:iKey;

while( !feof(fp) )
{
	fgets(fp, szBuffer, charsmax(szBuffer));
	trim(szBuffer);
	
	if( szBuffer[0] == '[' )
	{
		strtok(szBuffer[1], szLang, charsmax(szLang), szBuffer, 1, ']');
	}
	else if( szBuffer[0] )
	{
		strbreak(szBuffer, szKey, charsmax(szKey), szTranslation, charsmax(szTranslation));
		iKey = GetLangTransKey(szKey);
		if( iKey != TransKey_Bad )
		{
			while( replace(szTranslation, charsmax(szTranslation), "!g", "^4") ){}
			while( replace(szTranslation, charsmax(szTranslation), "!t", "^3") ){}
			while( replace(szTranslation, charsmax(szTranslation), "!n", "^1") ){}
			AddTranslation(szLang, iKey, szTranslation[2]);
		}
	}
}

fclose(fp);
return 1;
}
